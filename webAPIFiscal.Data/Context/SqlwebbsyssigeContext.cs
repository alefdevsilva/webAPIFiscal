// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace WebApiFiscal.Dominio.Model
{
    public partial class SqlwebbsyssigeContext : DbContext
    {
        public SqlwebbsyssigeContext()
        {
        }

        public SqlwebbsyssigeContext(DbContextOptions<SqlwebbsyssigeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Fiscalcfopview> Fiscalcfopview { get; set; }
        public virtual DbSet<FiscalncmMonofasico> FiscalncmMonofasico { get; set; }
        public virtual DbSet<TblEmpresa> TblEmpresa { get; set; }
        public virtual DbSet<TblIcmsUf> TblIcmsUf { get; set; }
        public virtual DbSet<TblIvaLojaX> TblIvaLojaX { get; set; }
        public virtual DbSet<ViewProdutoGeralNomesAntigosComCodBarras> ViewProdutoGeralNomesAntigosComCodBarras { get; set; }
        public virtual DbSet<VwUfFcppadrao> VwUfFcppadrao { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source = 192.168.1.7; Database = sQLWebbsysSige; Integrated Security = False; User ID = sistema.webbsys; Password = kM0@^j8P4ZwjoTz0U0qh; Connect Timeout = 30; Encrypt = False; TrustServerCertificate = True; ApplicationIntent = ReadWrite; MultiSubnetFailover = False");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Fiscalcfopview>(entity =>
            {
                entity.ToView("FISCALCFOPVIEW");

                entity.Property(e => e.CalculaCofins).IsUnicode(false);

                entity.Property(e => e.CalculaIcms).IsUnicode(false);

                entity.Property(e => e.CalculaIpi).IsUnicode(false);

                entity.Property(e => e.CalculaPis).IsUnicode(false);

                entity.Property(e => e.Clafiscal).IsUnicode(false);

                entity.Property(e => e.CstCofins).IsUnicode(false);

                entity.Property(e => e.CstIcms).IsUnicode(false);

                entity.Property(e => e.CstIpi).IsUnicode(false);

                entity.Property(e => e.CstPis).IsUnicode(false);

                entity.Property(e => e.Natureza).IsUnicode(false);
            });

            modelBuilder.Entity<FiscalncmMonofasico>(entity =>
            {
                entity.HasKey(e => e.IdFiscalncmMonofasico)
                    .HasName("PK_ID_FISCALNCM_MONOFASICO");

                entity.Property(e => e.CstCofinsSaida).IsUnicode(false);

                entity.Property(e => e.CstPisSaida).IsUnicode(false);

                entity.Property(e => e.Nometec).IsUnicode(false);

                entity.Property(e => e.Tec).IsUnicode(false);
            });

            modelBuilder.Entity<TblEmpresa>(entity =>
            {
                entity.HasKey(e => e.TblEmpresaId)
                    .HasName("PkEmpresaId")
                    .IsClustered(false);

                entity.HasIndex(e => e.Cgc, "CGC")
                    .IsClustered();

                entity.Property(e => e.AccountNumberCoachTopline).IsUnicode(false);

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.ApelidoCoachTopline).IsUnicode(false);

                entity.Property(e => e.Ativado).IsUnicode(false);

                entity.Property(e => e.AtividadeEconomica).IsUnicode(false);

                entity.Property(e => e.AtualizadoWeb).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Caminho).IsUnicode(false);

                entity.Property(e => e.Cat52Senha).IsUnicode(false);

                entity.Property(e => e.Cat52Usuario).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cgc).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cnae).IsUnicode(false);

                entity.Property(e => e.CodIbgeMun).IsUnicode(false);

                entity.Property(e => e.CodIbgePais).IsUnicode(false);

                entity.Property(e => e.CodIbgeUf).IsUnicode(false);

                entity.Property(e => e.CodigoFornecedor).IsUnicode(false);

                entity.Property(e => e.CodigoIss).IsUnicode(false);

                entity.Property(e => e.Codmarca).IsUnicode(false);

                entity.Property(e => e.Codpla).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.ContribuinteIpi).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.EmailGerente).IsUnicode(false);

                entity.Property(e => e.EmailNfe).IsUnicode(false);

                entity.Property(e => e.EmailNfeServiços).IsUnicode(false);

                entity.Property(e => e.EmitenteNfe).IsUnicode(false);

                entity.Property(e => e.EspNfe).IsUnicode(false);

                entity.Property(e => e.EspNfea).IsUnicode(false);

                entity.Property(e => e.EspNfeb).IsUnicode(false);

                entity.Property(e => e.Estabelecimento).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.Fantasia).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.FlagGeraMovtoTerceiro).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.FoneSac).IsUnicode(false);

                entity.Property(e => e.Formatonfe).IsUnicode(false);

                entity.Property(e => e.GeraBalancete)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')");

                entity.Property(e => e.GeraMovtosTransferencia).HasDefaultValueSql("((1))");

                entity.Property(e => e.GrSupervisor).IsUnicode(false);

                entity.Property(e => e.GrpPrc).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.GrupoEmpresa).IsUnicode(false);

                entity.Property(e => e.GrupoEmpresarial).IsUnicode(false);

                entity.Property(e => e.Ie).IsUnicode(false);

                entity.Property(e => e.Iest).IsUnicode(false);

                entity.Property(e => e.Imunicipal).IsUnicode(false);

                entity.Property(e => e.IndAtividade).IsUnicode(false);

                entity.Property(e => e.InscMun).IsUnicode(false);

                entity.Property(e => e.Ipaddress).IsUnicode(false);

                entity.Property(e => e.Lancado).IsUnicode(false);

                entity.Property(e => e.Loja).IsUnicode(false);

                entity.Property(e => e.Lrlp).IsUnicode(false);

                entity.Property(e => e.MerchantName).IsUnicode(false);

                entity.Property(e => e.ModNfe).IsUnicode(false);

                entity.Property(e => e.ModNfea).IsUnicode(false);

                entity.Property(e => e.ModNfeb).IsUnicode(false);

                entity.Property(e => e.Nfe).IsUnicode(false);

                entity.Property(e => e.NfeContigenciaEspecie).IsUnicode(false);

                entity.Property(e => e.NfeContigenciaModelo).IsUnicode(false);

                entity.Property(e => e.NfeContigenciaNumero).HasDefaultValueSql("((1))");

                entity.Property(e => e.NfeContigenciaSerie).HasDefaultValueSql("((900))");

                entity.Property(e => e.NfeEspecie).IsUnicode(false);

                entity.Property(e => e.NfeEspecieC).IsUnicode(false);

                entity.Property(e => e.NfeModelo).IsUnicode(false);

                entity.Property(e => e.NfeModeloC).IsUnicode(false);

                entity.Property(e => e.NfeSerie).IsUnicode(false);

                entity.Property(e => e.NfeSerieC).IsUnicode(false);

                entity.Property(e => e.NfmEspecie).IsUnicode(false);

                entity.Property(e => e.NfmModelo).IsUnicode(false);

                entity.Property(e => e.NfmSerie).IsUnicode(false);

                entity.Property(e => e.NfsEspecie).IsUnicode(false);

                entity.Property(e => e.NfsModelo).IsUnicode(false);

                entity.Property(e => e.NfsSerie).IsUnicode(false);

                entity.Property(e => e.NfsUltimaNota).HasDefaultValueSql("((1))");

                entity.Property(e => e.Nire).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NumeroSuframa).IsUnicode(false);

                entity.Property(e => e.Numser1).IsUnicode(false);

                entity.Property(e => e.Numser2).IsUnicode(false);

                entity.Property(e => e.Numser3).IsUnicode(false);

                entity.Property(e => e.Numser4).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.Perfilsped).IsUnicode(false);

                entity.Property(e => e.PossueIsencao).IsUnicode(false);

                entity.Property(e => e.ProcessoIsencaoPisCofins).IsUnicode(false);

                entity.Property(e => e.RegimeTributario).IsUnicode(false);

                entity.Property(e => e.Rua).IsUnicode(false);

                entity.Property(e => e.SaleChannel).IsUnicode(false);

                entity.Property(e => e.ScanAtivado).IsUnicode(false);

                entity.Property(e => e.ScanJustificativa).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);

                entity.Property(e => e.SerNfe).IsUnicode(false);

                entity.Property(e => e.SerNfea).IsUnicode(false);

                entity.Property(e => e.SerNfeb).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.Siglaempresa)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('LOJA')");

                entity.Property(e => e.Supersimples).IsUnicode(false);

                entity.Property(e => e.TipoPos).IsUnicode(false);

                entity.Property(e => e.Tipoloja).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UMapa).IsUnicode(false);

                entity.Property(e => e.VarejoOutlet)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TblIcmsUf>(entity =>
            {
                entity.HasKey(e => e.IdIcmsUf)
                    .HasName("PK_ID_ICMS_UF")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.UfOrigem, e.UfDestino, e.DataInicio, e.DataTermino }, "IX_Chave_Unica")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Obs1).IsUnicode(false);

                entity.Property(e => e.Obs2).IsUnicode(false);

                entity.Property(e => e.UfDestino).IsUnicode(false);

                entity.Property(e => e.UfOrigem).IsUnicode(false);
            });

            modelBuilder.Entity<TblIvaLojaX>(entity =>
            {
                entity.Property(e => e.AtualizadoWeb).IsUnicode(false);

                entity.Property(e => e.Cest).IsUnicode(false);

                entity.Property(e => e.CfopDestino).IsUnicode(false);

                entity.Property(e => e.Cst).IsUnicode(false);

                entity.Property(e => e.CstCofinsEntrada).IsUnicode(false);

                entity.Property(e => e.CstCofinsSaida).IsUnicode(false);

                entity.Property(e => e.CstIcmsDestino).IsUnicode(false);

                entity.Property(e => e.CstIcmsOrigem).IsUnicode(false);

                entity.Property(e => e.CstL).IsUnicode(false);

                entity.Property(e => e.CstPisEntrada).IsUnicode(false);

                entity.Property(e => e.CstPisSaida).IsUnicode(false);

                entity.Property(e => e.Ctm).IsUnicode(false);

                entity.Property(e => e.Hora).IsUnicode(false);

                entity.Property(e => e.IdAliquota).IsUnicode(false);

                entity.Property(e => e.Nometec).IsUnicode(false);

                entity.Property(e => e.Obslegal).IsUnicode(false);

                entity.Property(e => e.Sdatahora).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.SiglaDestino).IsUnicode(false);

                entity.Property(e => e.Tec).IsUnicode(false);

                entity.Property(e => e.TemProtocolo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<ViewProdutoGeralNomesAntigosComCodBarras>(entity =>
            {
                entity.ToView("view_ProdutoGeral_NomesAntigos_com_CodBarras");

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Atualizado).IsUnicode(false);

                entity.Property(e => e.Categoria).IsUnicode(false);

                entity.Property(e => e.Cbarras).IsUnicode(false);

                entity.Property(e => e.Cest).IsUnicode(false);

                entity.Property(e => e.Codmarca).IsUnicode(false);

                entity.Property(e => e.Comitem).IsUnicode(false);

                entity.Property(e => e.Composicao).IsUnicode(false);

                entity.Property(e => e.CorDescricao).IsUnicode(false);

                entity.Property(e => e.DescExportacao).IsUnicode(false);

                entity.Property(e => e.DescrEcf).IsUnicode(false);

                entity.Property(e => e.DescrIngles).IsUnicode(false);

                entity.Property(e => e.DescrPort).IsUnicode(false);

                entity.Property(e => e.DescricaoEcommerce).IsUnicode(false);

                entity.Property(e => e.DescricaoGrupo).IsUnicode(false);

                entity.Property(e => e.DescricaoLinha).IsUnicode(false);

                entity.Property(e => e.DescricaoSubGrupo).IsUnicode(false);

                entity.Property(e => e.Descricaotamanho).IsUnicode(false);

                entity.Property(e => e.DetalheCor).IsUnicode(false);

                entity.Property(e => e.Divisao).IsUnicode(false);

                entity.Property(e => e.Familia).IsUnicode(false);

                entity.Property(e => e.Fantasia).IsUnicode(false);

                entity.Property(e => e.FatorConversao).IsUnicode(false);

                entity.Property(e => e.LarguraDetalhe).IsUnicode(false);

                entity.Property(e => e.Lavagem).IsUnicode(false);

                entity.Property(e => e.Licenca).IsUnicode(false);

                entity.Property(e => e.LinNom).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Processo).IsUnicode(false);

                entity.Property(e => e.Profundidade).IsUnicode(false);

                entity.Property(e => e.Publico).IsUnicode(false);

                entity.Property(e => e.Rctl).IsUnicode(false);

                entity.Property(e => e.RefNom).IsUnicode(false);

                entity.Property(e => e.Refitem).IsUnicode(false);

                entity.Property(e => e.Subdivisao).IsUnicode(false);

                entity.Property(e => e.TamanhoConvertido).IsUnicode(false);

                entity.Property(e => e.Tamitem).IsUnicode(false);

                entity.Property(e => e.Tec).IsUnicode(false);

                entity.Property(e => e.Tier).IsUnicode(false);

                entity.Property(e => e.Unidade).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<VwUfFcppadrao>(entity =>
            {
                entity.ToView("VwUF_FCPPadrao");

                entity.Property(e => e.Sigla).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
